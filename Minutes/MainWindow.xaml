<Window
    x:Class="Minutes.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    xmlns:act="clr-namespace:Minutes.Actions"
    xmlns:beh="clr-namespace:Minutes.Behaviors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:fa="clr-namespace:FontAwesome.WPF;assembly=FontAwesome.WPF"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:local="clr-namespace:Minutes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:usr="clr-namespace:Minutes.UserControls"
    Title="QuickMinutes"
    Width="600"
    Height="456"
    Background="#FF1B1B1C"
    mc:Ignorable="d">
    <Window.InputBindings>
        <KeyBinding Command="{Binding SaveMinutesCommand}" Gesture="Ctrl+Shift+S"/>
        <KeyBinding Command="{Binding StartInstantSaveCommand}" Gesture="Ctrl+S"/>
    </Window.InputBindings>
    <Window.Resources>
        <local:DetailContentReferenceConverter x:Key="DetailContentReferenceConverter"/>
        <local:IndexContentCombineConverter x:Key="indexContentCombineConverter"/>
        <Storyboard x:Key="ListBoxHilightAnimation">
            <ColorAnimation Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)" To="Red" Duration="0:0:0.2"/>
            <!--<ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF4E4E74" Duration="0:0:0.2"/>-->
        </Storyboard>
        <Style x:Key="AnimatedSwitch" TargetType="{x:Type ToggleButton}">
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Background" Value="#FAFAFB" />
            <Setter Property="BorderBrush" Value="#EAEAEB" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Viewbox Stretch="Uniform">
                            <Canvas Name="Layer_1" Width="35" Height="10" Canvas.Left="10" Canvas.Top="0">
                                <Ellipse  Canvas.Left="0" Width="10" Height="10" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5"/>
                                <Ellipse  Canvas.Left="25" Width="10" Height="10" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5"/>
                                <Border Canvas.Left="5" Canvas.Top="0" Width="25" Height="10" Name="rect416927" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0.5"/>
                                <Ellipse x:Name="ellipse"  Canvas.Left="0" Width="10" Height="10" Fill="White" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.3">
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform X="0" Y="0" />
                                    </Ellipse.RenderTransform>
                                    <Ellipse.BitmapEffect>
                                        <DropShadowBitmapEffect Softness="0.1" ShadowDepth="0.7" Direction="270" Color="#BBBBBB"/>
                                    </Ellipse.BitmapEffect>
                                </Ellipse>
                            </Canvas>
                        </Viewbox>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True" >
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#52D468" Duration="0:0:0.2" />
                                            <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#41C955" Duration="0:0:0.2" />
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <SplineDoubleKeyFrame KeyTime="0:0:0.4" Value="25" KeySpline="0, 1, 0.6, 1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#FAFAFB" Duration="0:0:0.2" />
                                            <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#EAEAEB" Duration="0:0:0.2" />
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                                <SplineDoubleKeyFrame KeyTime="0" Value="15"/>
                                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0" KeySpline="0, 0.5, 0.5, 1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="myStyle" TargetType="ListBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBox">
                        <ScrollViewer Background="#FFB4DCFF" HorizontalScrollBarVisibility="Auto">
                            <StackPanel IsItemsHost="True" Orientation="Horizontal" />
                        </ScrollViewer>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate x:Key="HeaderItemsTemplate">
            <TextBox
                Height="20"
                MinWidth="50"
                Margin="0,0,10,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Style="{StaticResource HilightTextBox}"
                Text="{}">
                <i:Interaction.Behaviors>
                    <beh:FitTextBoxWidthBehavior />
                </i:Interaction.Behaviors>
            </TextBox>
        </DataTemplate>
        <SolidColorBrush Color="#FF8F8F8F" x:Key="BorderColor"/>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
            <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
        <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFECF4FC" Offset="0.0"/>
            <GradientStop Color="#FFDCECFC" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
        <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
            <GradientStop Color="#FFDCECFC" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
        <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFDAECFC" Offset="0.0"/>
            <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
        <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
            <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource ComboBox.Static.Background}" SnapsToDevicePixels="true">
                            <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
        <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="MinWidth" Value="0"/>
            <Setter Property="MinHeight" Value="0"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="dropDownBorder" BorderBrush="{x:Null}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{StaticResource TextBackgroundColor}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" Background="{StaticResource TextBackgroundColor}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <Border x:Name="border" Background="{StaticResource TextBackgroundColor}">
                    <TextBox x:Name="PART_EditableTextBox" Padding="2" Foreground="{StaticResource TextForegroundColor}" Style="{StaticResource HilightTextBox}" Background="{StaticResource TextBackgroundColor}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="Center" BorderBrush="{x:Null}"/>
                </Border>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="true">
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="TimePickerComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
            <!--<Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>-->
            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>-->
            <Setter Property="Foreground" Value="{StaticResource TextForegroundColor}"/>
            <!--<Setter Property="BorderThickness" Value="1"/>-->
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Padding" Value="6,3,5,3"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="2"/>
                    <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Window.DataContext>
        <local:MainWindowViewModel />
    </Window.DataContext>
    <Grid x:Name="MainGrid" Focusable="True" Background="{StaticResource MainBackgroundColor}">
        <Grid.RowDefinitions>
            <RowDefinition Height="60" />
            <RowDefinition Height="38" />
            <RowDefinition Height="38" />
            <RowDefinition Height="39" />
            <RowDefinition />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="119" />
            <ColumnDefinition Width="130" />
            <ColumnDefinition Width="200" />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <Border BorderThickness="0,1" Grid.Column="1" Height="115" Grid.Row="1" Grid.RowSpan="3" VerticalAlignment="Top" Grid.ColumnSpan="3">
            <Border.BorderBrush>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Rectangle StrokeDashArray="4 2"
                                   Stroke="{StaticResource BorderColor}"
                                   StrokeThickness="2"
                                   RadiusX="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}},Path=CornerRadius.TopRight}"
                                   RadiusY="{Binding RelativeSource={RelativeSource AncestorType={x:Type Bold}},Path=CornerRadius.BottomLeft}"
                                   Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}},Path=ActualWidth}"
                                   Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}},Path=ActualHeight}"/>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Border.BorderBrush>
        </Border>
        <ScrollViewer
            Grid.Row="4"
            Grid.Column="1"
            Grid.ColumnSpan="3"
            VerticalScrollBarVisibility="Hidden"
            Background="{StaticResource MainBackgroundColor}" BorderBrush="Black" BorderThickness="1,0,0,0"
            >
            <StackPanel>
                <ListView x:Name="MainContentsListView" ItemsSource="{Binding m_Agendas}" BorderBrush="{x:Null}">
                    <ListView.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel/>
                            <!--<Canvas/>-->
                        </ItemsPanelTemplate>
                    </ListView.ItemsPanel>
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <Thumb DragDelta="Thumb_DragDelta" Name="mark">
                                <Thumb.Template>
                                    <ControlTemplate>
                                        <usr:MainContentUserControl />
                                    </ControlTemplate>
                                </Thumb.Template>
                            </Thumb>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                    <ListBox.Template>
                        <ControlTemplate TargetType="ListView">
                            <ItemsPresenter Margin="0" />
                        </ControlTemplate>
                    </ListBox.Template>
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                            <Setter Property="OverridesDefaultStyle" Value="True" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ContentControl">
                                        <ContentPresenter />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListView.ItemContainerStyle>
                </ListView>
                <fa:ImageAwesome
                    Height="20"
                    Style="{StaticResource HilightImageAwesome}"
                    HorizontalAlignment="Left"
                    Icon="PlusCircle"
                    Margin="10" ToolTip="Add Agenda">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <act:AddAgendaAction TargetName="MainContentsListView" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </fa:ImageAwesome>
            </StackPanel>
        </ScrollViewer>
        <TextBox
            local:FocusUtility.IsFocused="True"
            Grid.Column="1"
            Grid.ColumnSpan="3"
            Height="37"
            Margin="10,7,50,7"
            VerticalAlignment="Center"
            FontSize="25"
            Style="{StaticResource HilightTextBox}"
            Text="{Binding m_Title, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
            UseLayoutRounding="False" Background="{StaticResource TextBackgroundColor}" Foreground="{DynamicResource TextForegroundColor}" ToolTip="Title" TabIndex="1" />
        <ToggleButton 
            Style="{StaticResource AnimatedSwitch}"
            Grid.Row="0" Grid.Column="3"
            Height="7"
            HorizontalAlignment="Right" VerticalAlignment="Top"
            Margin="0,10,13,0"
            IsChecked="{Binding m_PortIsOpen,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
            Command="{Binding ChangeToggleSwitchCommand}" ToolTip="Instant Save" />
        <fa:ImageAwesome
                x:Name="saveIcon"
                Width="20"
                Height="20"
                Grid.Row="0"
                Grid.Column="3"
                Icon="Save"
                Margin="0,25,16,15"
                HorizontalAlignment="Right"
                RenderTransformOrigin="0.5,0.5"
                ToolTip="Save">
            <fa:ImageAwesome.Foreground>
                <SolidColorBrush x:Name="myAnimatedBrush" Color="#FFC7C7C7" />
            </fa:ImageAwesome.Foreground>
            <fa:ImageAwesome.Resources>
                <Storyboard x:Key="HilightSaveIconAnimation">
                    <ColorAnimation Storyboard.TargetName="myAnimatedBrush" Storyboard.TargetProperty="Color" From="#FFC7C7C7" To="#FF38EC92" AutoReverse="True" Duration="0:0:0.5"/>
                </Storyboard>
            </fa:ImageAwesome.Resources>
            <i:Interaction.Behaviors>
                <beh:SaveFileBehavior />
            </i:Interaction.Behaviors>
            <fa:ImageAwesome.RenderTransform>
                <TransformGroup>
                    <ScaleTransform />
                    <SkewTransform />
                    <RotateTransform Angle="23.199" />
                    <TranslateTransform />
                </TransformGroup>
            </fa:ImageAwesome.RenderTransform>
        </fa:ImageAwesome>
        <!--</Button>-->
        <fa:ImageAwesome
            Foreground="{StaticResource IconColor}"
            Grid.Row="1"
            Grid.Column="1"
            Width="24"
            Height="24"
            Margin="10,0,0,4"
            HorizontalAlignment="Left"
            VerticalAlignment="Bottom"
            Icon="Calendar" ToolTip="Date" />
        <TextBox
            x:Name="DateTextBox"
            Grid.Row="1"
            Grid.Column="1"
            Width="80"
            Height="24"
            Margin="44,0,0,4"
            HorizontalAlignment="Left"
            VerticalAlignment="Bottom"
            Style="{StaticResource HilightTextBox}"
            Text="{Binding m_Day, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
            TextWrapping="Wrap" Background="{StaticResource TextBackgroundColor}" Foreground="{DynamicResource TextForegroundColor}" ToolTip="Date" TabIndex="2">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="GotFocus">
                    <act:TextBoxCalenderAction TargetName="MainGrid" />
                </i:EventTrigger>
                <i:EventTrigger EventName="LostFocus">
                    <act:TextBoxCalenderBanishAction TargetName="MainGrid" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </TextBox>
        <!--<TextBox Style="{StaticResource HilightTextBox}" Height="23" Width="50" Margin="35,40,0,0" TextWrapping="Wrap" Text="{Binding m_Day,Mode=TwoWay}" VerticalAlignment="Top"/>-->
        <fa:ImageAwesome
            Grid.Row="1"
            Grid.Column="2"
            Width="24"
            Height="24"
            Margin="10,0,0,4"
            HorizontalAlignment="Left"
            VerticalAlignment="Bottom"
            Icon="ClockOutline" Foreground="{DynamicResource IconColor}" ToolTip="Time" />
        <TextBlock
            Grid.Row="1"
            Grid.Column="2"
            Width="12"
            Height="16"
            Margin="110,5,0,8"
            HorizontalAlignment="Left"
            VerticalAlignment="Bottom"
            Foreground="{StaticResource TextForegroundColor}"
            Text="～" />
        <fa:ImageAwesome
            Grid.Row="1"
            Grid.Column="3"
            Width="24"
            Height="24"
            Margin="10,0,0,4"
            HorizontalAlignment="Left"
            VerticalAlignment="Bottom"
            Icon="BuildingOutline" Foreground="{DynamicResource IconColor}" ToolTip="Location" />
        <TextBox
            Grid.Row="1"
            Grid.Column="3"
            Width="70"
            Height="22"
            MinWidth="70"
            Margin="39,0,0,6"
            HorizontalAlignment="Left"
            VerticalAlignment="Bottom"
            Style="{StaticResource HilightTextBox}"
            Text="{Binding m_Room, Mode=TwoWay}"
            TextWrapping="Wrap" Background="{StaticResource TextBackgroundColor}" Foreground="{DynamicResource TextForegroundColor}" TabIndex="6">
            <i:Interaction.Behaviors>
                <beh:FitTextBoxWidthBehavior />
            </i:Interaction.Behaviors>
        </TextBox>
        <!--<ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3">-->
        <fa:ImageAwesome
            Grid.Row="2"
            Grid.Column="1"
            Width="24"
            Height="24"
            Margin="10,10,0,4"
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            Icon="Users" Foreground="{DynamicResource IconColor}" ToolTip="Participants" />
        <StackPanel
            Grid.Row="2"
            Grid.Column="1"
            Grid.ColumnSpan="3"
            Margin="44,0,0,0"
            Orientation="Horizontal">
            <ListBox ItemsSource="{Binding m_Participants}">
                <!--  Template property  -->
                <!--  主に Border コントロール等で全体の枠線や背景色の設定を行うことが多いです。また、コントロール内のどの部分にコレクション本体を配置するかも、ここで決定します (ItemsPresenter)。  -->
                <ListBox.Template>
                    <ControlTemplate TargetType="ListBox">
                        <ItemsPresenter Margin="0" />
                    </ControlTemplate>
                </ListBox.Template>
                <!--  ItemsPanel  -->
                <!--  Panel の派生クラスを使用し、コレクション項目をどのようにレイアウトするかを決定します。StackPanel や WrapPanel で垂直または水平方向に並べることが多いでしょう。  -->
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel VerticalAlignment="Center" Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <!--  ItemTemplate プロパティには DataTemplate を指定し、各項目のデータ オブジェクトをどのように表示するかを決定します。  -->
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBox
                            local:FocusUtility.IsFocused="True"
                            Height="22"
                            MinWidth="50"
                            Margin="0,0,0,0"
                            FontSize="12"
                            Background="{StaticResource TextBackgroundColor}"
                            Foreground="{StaticResource TextForegroundColor}"
                            Style="{StaticResource HilightTextBox}"
                            Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <fa:ImageAwesome Icon="Times" Height="10" Width="10" Margin="0,0,5,0" Foreground="{StaticResource ResourceKey=UnselectColor}" Style="{StaticResource HilightImageAwesome}">
                                <i:Interaction.Behaviors>
                                    <beh:DeleteParticipantAction />
                                </i:Interaction.Behaviors>
                            </fa:ImageAwesome>
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
                <!--  コレクション コントロール (ItemsControl) は、データ オブジェクトを格納する「コンテナー要素」を生成し、そのコンテナー要素を並べて表示します。生成されるコンテナー要素は ItemsControl の派生クラスごとに異なり、例えば ListBox が生成するコンテナー要素は ListBoxItem、ComboBox が生成するコンテナー要素は ComboBoxItem です。  -->
                <!--  ItemContainerStyle は、そのコンテナー要素をカスタマイズするためのプロパティです。項目にマウスが乗ったときに色を変える、項目が選択されたときに色を変える、といった動作はコンテナー要素が実現しているもので、これらの動作を変更したい場合は ItemContainerStyle を設定しカスタマイズします。  -->
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ContentControl">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>
            <fa:ImageAwesome
                Height="20"
                Style="{StaticResource HilightImageAwesome}"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Icon="PlusCircle" ToolTip="Add Participant">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDown">
                        <act:AddParticipantAction TargetName="MainContentsListView" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </fa:ImageAwesome>
        </StackPanel>
        <!--</ScrollViewer>-->
        <fa:ImageAwesome
            Grid.Row="3"
            Grid.Column="1"
            Width="24"
            Height="22"
            Margin="10,10,0,7"
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            Icon="Pencil" Foreground="{DynamicResource IconColor}" ToolTip="Writers" />
        <StackPanel
            Grid.Row="3"
            Grid.Column="1"
            Grid.ColumnSpan="3"
            Margin="44,0,0,0"
            Orientation="Horizontal">
            <ListBox ItemsSource="{Binding m_Writer}">
                <!--  Template property  -->
                <!--  主に Border コントロール等で全体の枠線や背景色の設定を行うことが多いです。また、コントロール内のどの部分にコレクション本体を配置するかも、ここで決定します (ItemsPresenter)。  -->
                <ListBox.Template>
                    <ControlTemplate TargetType="ListBox">
                        <ItemsPresenter Margin="0" />
                    </ControlTemplate>
                </ListBox.Template>
                <!--  ItemsPanel  -->
                <!--  Panel の派生クラスを使用し、コレクション項目をどのようにレイアウトするかを決定します。StackPanel や WrapPanel で垂直または水平方向に並べることが多いでしょう。  -->
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel VerticalAlignment="Center" Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <!--  ItemTemplate プロパティには DataTemplate を指定し、各項目のデータ オブジェクトをどのように表示するかを決定します。  -->
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBox
                            local:FocusUtility.IsFocused="True"
                            Height="22"
                            MinWidth="50"
                            FontSize="12"
                            Background="{StaticResource TextBackgroundColor}"
                            Foreground="{StaticResource TextForegroundColor}"
                            Style="{StaticResource HilightTextBox}"
                            Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <fa:ImageAwesome Icon="Times" Height="10" Width="10" Margin="0,0,5,0" Foreground="{StaticResource ResourceKey=UnselectColor}" Style="{StaticResource HilightImageAwesome}">
                                <i:Interaction.Behaviors>
                                    <beh:DeleteWriterAction />
                                </i:Interaction.Behaviors>
                            </fa:ImageAwesome>
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
                <!--  コレクション コントロール (ItemsControl) は、データ オブジェクトを格納する「コンテナー要素」を生成し、そのコンテナー要素を並べて表示します。生成されるコンテナー要素は ItemsControl の派生クラスごとに異なり、例えば ListBox が生成するコンテナー要素は ListBoxItem、ComboBox が生成するコンテナー要素は ComboBoxItem です。  -->
                <!--  ItemContainerStyle は、そのコンテナー要素をカスタマイズするためのプロパティです。項目にマウスが乗ったときに色を変える、項目が選択されたときに色を変える、といった動作はコンテナー要素が実現しているもので、これらの動作を変更したい場合は ItemContainerStyle を設定しカスタマイズします。  -->
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ContentControl">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>
            <fa:ImageAwesome
                Height="20"
                Style="{StaticResource HilightImageAwesome}"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Icon="PlusCircle" ToolTip="Add Writer">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDown">
                        <act:AddWriterAction TargetName="MainContentsListView" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </fa:ImageAwesome>
        </StackPanel>
        <ComboBox
            x:Name="startTimeComboBox"
            Grid.Row="1"
            Grid.Column="2"
            Width="65"
            Height="22"
            Margin="39,0,0,5"
            HorizontalAlignment="Left"
            VerticalAlignment="Bottom"
            IsEditable="True"
            ItemsSource="{Binding m_SelectableTimeList}"
            Text="{Binding m_StartTime}" Style="{DynamicResource TimePickerComboBoxStyle}" ToolTip="Start Time" TabIndex="4" >
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Foreground="{StaticResource TextForegroundColor}" Text="{Binding}"/>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>
        <ComboBox
            x:Name="endTimeComboBox"
            Grid.Row="1"
            Grid.Column="2"
            Width="65"
            Height="22"
            Margin="130,0,0,5"
            HorizontalAlignment="Left"
            VerticalAlignment="Bottom"
            IsEditable="True"
            ItemsSource="{Binding m_SelectableTimeList}"
            Style="{DynamicResource TimePickerComboBoxStyle}"
            Text="{Binding m_EndTime}" BorderBrush="{x:Null}" ToolTip="End Time" TabIndex="5" >
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Foreground="{StaticResource TextForegroundColor}" Text="{Binding}"/>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>
        <Calendar
            x:Name="calender"
            Grid.Row="1"
            Grid.RowSpan="4"
            Grid.Column="1"
            Grid.ColumnSpan="2"
            Width="179"
            Height="165"
            Margin="44,6,0,0"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Visibility="Hidden" Focusable="False">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectedDatesChanged">
                    <act:CalenderBanishAction TargetName="MainGrid" />
                </i:EventTrigger>
                <i:EventTrigger EventName="LostFocus">
                    <act:CalenderBanishAction TargetName="MainGrid" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Calendar>
        <!--<ScrollViewer
            Grid.RowSpan="5"
            Grid.Column="0"
            MaxWidth="119"
            Background="#FFD4B0B0"
            VerticalScrollBarVisibility="Auto"
            HorizontalScrollBarVisibility="Disabled">-->
        <Grid
            Grid.RowSpan="5"
            Grid.Column="0">
            <Border BorderBrush="{DynamicResource BorderColor}" BorderThickness="0,0,1,0">
                <StackPanel Orientation="Vertical">
                    <!--<Border BorderThickness="0,0,0,1" Grid.Column="1" Height="30" VerticalAlignment="Top">
                        <TextBlock Text="{Binding m_Title}" TextTrimming="CharacterEllipsis" FontSize="20" Foreground="{StaticResource TextForegroundColor}"/>
                        <Border.BorderBrush>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Rectangle StrokeDashArray="4 2"
                                   Stroke="{StaticResource BorderColor}"
                                   StrokeThickness="2"
                                   RadiusX="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}},Path=CornerRadius.TopRight}"
                                   RadiusY="{Binding RelativeSource={RelativeSource AncestorType={x:Type Bold}},Path=CornerRadius.BottomLeft}"
                                   Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}},Path=ActualWidth}"
                                   Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}},Path=ActualHeight}"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.BorderBrush>
                    </Border>-->
                    <ListBox ItemsSource="{Binding m_Agendas}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Background="{StaticResource MainBackgroundColor}" BorderBrush="{x:Null}" >
                        <!--<ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel/>
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>-->
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ListBoxItem}">
                                <Setter Property="OverridesDefaultStyle" Value="True" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                            <Border x:Name="Border" Background="{StaticResource MainBackgroundColor}">
                                                <Border.Style>
                                                    <Style TargetType="{x:Type Border}">
                                                        <Style.Triggers>
                                                            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#FF4E4E74" Duration="0:0:0.2"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>
                                                            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#FF2D2D30" Duration="0:0:0.2"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </EventTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                                <ContentPresenter/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <WrapPanel>
                                    <StackPanel Orientation="Vertical">
                                        <Expander Header="{Binding m_Content}" Foreground="{StaticResource TextForegroundColor}">
                                            <Expander.Template>
                                                <ControlTemplate TargetType="{x:Type Expander}">
                                                    <DockPanel>
                                                        <ToggleButton IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" OverridesDefaultStyle="True">
                                                            <ToggleButton.Template>
                                                                <ControlTemplate>
                                                                    <WrapPanel Orientation="Horizontal">
                                                                        <TextBlock TextTrimming="CharacterEllipsis" FontSize="18" VerticalAlignment="Center" Foreground="{StaticResource TextForegroundColor}">
                                                                            <TextBlock.Text>
                                                                                <MultiBinding Converter="{StaticResource indexContentCombineConverter}">
                                                                                    <Binding Path="m_AgendaIndex"/>
                                                                                    <Binding Path="m_Content"/>
                                                                                </MultiBinding>
                                                                            </TextBlock.Text>
                                                                        </TextBlock>
                                                                    </WrapPanel>
                                                                </ControlTemplate>
                                                            </ToggleButton.Template>
                                                        </ToggleButton>
                                                        <ContentPresenter x:Name="ExpanderContent" DockPanel.Dock="Bottom" Visibility="Collapsed"/>
                                                    </DockPanel>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsExpanded" Value="True">
                                                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Expander.Template>
                                            <ListBox ItemsSource="{Binding m_DetailItems}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Background="{x:Null}" BorderBrush="{x:Null}">
                                                <ListBox.ItemContainerStyle>
                                                    <Style TargetType="ListBoxItem">
                                                        <Setter Property="OverridesDefaultStyle" Value="True" />
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                    <Border Background="{StaticResource MainBackgroundColor}">
                                                                        <Border.Style>
                                                                            <Style TargetType="{x:Type Border}">
                                                                                <Style.Triggers>
                                                                                    <EventTrigger RoutedEvent="UIElement.MouseEnter">
                                                                                        <BeginStoryboard>
                                                                                            <Storyboard>
                                                                                                <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#FF4E4E74" Duration="0:0:0.2"/>
                                                                                            </Storyboard>
                                                                                        </BeginStoryboard>
                                                                                    </EventTrigger>
                                                                                    <EventTrigger RoutedEvent="UIElement.MouseLeave">
                                                                                        <BeginStoryboard>
                                                                                            <Storyboard>
                                                                                                <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#FF2D2D30" Duration="0:0:0.2"/>
                                                                                            </Storyboard>
                                                                                        </BeginStoryboard>
                                                                                    </EventTrigger>
                                                                                </Style.Triggers>
                                                                            </Style>
                                                                        </Border.Style>
                                                                        <ContentPresenter />
                                                                    </Border>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </ListBox.ItemContainerStyle>
                                                <ListBox.ItemTemplate>
                                                    <DataTemplate>
                                                        <Grid>
                                                            <WrapPanel Orientation="Horizontal">
                                                                <!--<Label Content="・" Foreground="{StaticResource TextForegroundColor}" Background="{x:Null}"/>-->
                                                                <TextBlock Text="{Binding m_Content,Converter={StaticResource DetailContentReferenceConverter}}" TextTrimming="CharacterEllipsis" FontSize="16" VerticalAlignment="Center" Foreground="{StaticResource TextForegroundColor}"/>
                                                            </WrapPanel>
                                                        </Grid>
                                                    </DataTemplate>
                                                </ListBox.ItemTemplate>
                                            </ListBox>
                                        </Expander>
                                        <!--<Label Content="{Binding m_AgendaIndex}" Foreground="{StaticResource TextForegroundColor}"/>-->
                                        <!--<TextBlock Text="{Binding m_Content}" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" Foreground="{StaticResource TextForegroundColor}"/>-->
                                        <!--<Label Content="{Binding m_Content}"/>-->
                                    </StackPanel>
                                </WrapPanel>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </StackPanel>
            </Border>
        </Grid>
        <!--</ScrollViewer>-->
    </Grid>
</Window>
